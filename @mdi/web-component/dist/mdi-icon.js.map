{"version":3,"file":"mdi-icon.js","sources":["../src/mdi-icon.ts","../src/Component.ts"],"sourcesContent":["import Component from \"./Component\";\n\n@Component({\n  selector: 'mdi-icon',\n  template: `<svg viewBox=\"0 0 24 24\">\n      <path d=\"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\"/>\n    </svg>`,\n  style: `:host {\n      display: inline-block;\n    }\n    :host svg {\n      width: 1.5rem;\n      height: 1.5rem;\n    }`,\n  useShadow: true\n})\nclass MdiIcon extends HTMLElement {\n  connectedCallback() {\n    // const elm = document.createElement('h3');\n    // elm.textContent = 'Stuff';\n    // this.shadowRoot.appendChild(elm);\n    console.log('connected callback');\n  }\n\n  disconnectedCallback() {\n    console.log('disconnected callback');\n  }\n\n  componentWillMount() {\n    console.log('component will mount');\n  }\n\n  componentDidMount() {\n    console.log('component did mount');\n  }\n\n  componentWillUnmount() {\n    console.log('component will unmount');\n  }\n\n  componentDidUnmount() {\n    console.log('component did unmount');\n  }\n}\n","interface CustomElementConfig {\r\n  selector:string;\r\n  template: string;\r\n  style?: string;\r\n  useShadow?: boolean;\r\n}\r\n\r\nexport default (config: CustomElementConfig) => (cls) => {\r\n  if (!config.template) {\r\n      throw new Error('You need to pass a template for the element');\r\n  }\r\n  const template = document.createElement('template');\r\n  if (config.style) {\r\n      config.template = `<style>${config.style}</style> ${config.template}`;\r\n  }\r\n  template.innerHTML = config.template;\r\n\r\n  const connectedCallback = cls.prototype.connectedCallback || (() => {});\r\n  const disconnectedCallback = cls.prototype.disconnectedCallback || (() => {});\r\n\r\n  cls.prototype.connectedCallback = function() {\r\n      const clone = document.importNode(template.content, true);\r\n      if (config.useShadow) {\r\n          this.attachShadow({mode: 'open'}).appendChild(clone);\r\n      } else {\r\n          this.appendChild(clone);\r\n      }\r\n\r\n      if (this.componentWillMount) {\r\n          this.componentWillMount();\r\n      }\r\n      connectedCallback.call(this);\r\n      if (this.componentDidMount) {\r\n          this.componentDidMount();\r\n      }\r\n  };\r\n\r\n  cls.prototype.disconnectedCallback = function() {\r\n      if (this.componentWillUnmount) {\r\n          this.componentWillUnmount();\r\n      }\r\n      disconnectedCallback.call(this);\r\n      if (this.componentDidUnmount) {\r\n          this.componentDidUnmount();\r\n      }\r\n  };\r\n\r\n  window.customElements.define(config.selector, cls);\r\n};"],"names":["MdiIcon","HTMLElement","[object Object]","console","log","config","cls","template","Error","document","createElement","style","innerHTML","connectedCallback","prototype","disconnectedCallback","clone","importNode","content","useShadow","this","attachShadow","mode","appendChild","componentWillMount","call","componentDidMount","componentWillUnmount","componentDidUnmount","window","customElements","define","selector","Component"],"mappings":"AAgBA,IAAMA,EAAN,cAAsBC,YACpBC,oBAIEC,QAAQC,IAAI,sBAGdF,uBACEC,QAAQC,IAAI,yBAGdF,qBACEC,QAAQC,IAAI,wBAGdF,oBACEC,QAAQC,IAAI,uBAGdF,uBACEC,QAAQC,IAAI,0BAGdF,sBACEC,QAAQC,IAAI,2BAzBVJ,uUCTS,CAACK,GAAiCC,IAC/C,IAAKD,EAAOE,SACR,MAAM,IAAIC,MAAM,+CAEpB,MAAMD,EAAWE,SAASC,cAAc,YACpCL,EAAOM,QACPN,EAAOE,mBAAqBF,EAAOM,iBAAiBN,EAAOE,YAE/DA,EAASK,UAAYP,EAAOE,SAE5B,MAAMM,EAAoBP,EAAIQ,UAAUD,4BAClCE,EAAuBT,EAAIQ,UAAUC,+BAE3CT,EAAIQ,UAAUD,kBAAoB,WAC9B,MAAMG,EAAQP,SAASQ,WAAWV,EAASW,SAAS,GAChDb,EAAOc,UACPC,KAAKC,aAAa,CAACC,KAAM,SAASC,YAAYP,GAE9CI,KAAKG,YAAYP,GAGjBI,KAAKI,oBACLJ,KAAKI,qBAETX,EAAkBY,KAAKL,MACnBA,KAAKM,mBACLN,KAAKM,qBAIbpB,EAAIQ,UAAUC,qBAAuB,WAC7BK,KAAKO,sBACLP,KAAKO,uBAETZ,EAAqBU,KAAKL,MACtBA,KAAKQ,qBACLR,KAAKQ,uBAIbC,OAAOC,eAAeC,OAAO1B,EAAO2B,SAAU1B,ID7C/C2B,CAAU,CACTD,SAAU,WACVzB,SAAU,6GAGVI,MAAO,oHAOPQ,WAAW,KAEPnB"}